#N canvas 5 71 705 636 12;
#X obj 170 492 oscparse;
#X text 51 579 see also:;
#X obj 139 579 oscformat;
#X obj 223 579 netreceive;
#X text 434 582 updated for Pd version 0.46;
#X obj 170 515 print parse-output;
#X obj 313 579 list;
#X obj 418 437 netreceive -u -b;
#X msg 418 382 listen 5000;
#X msg 430 410 listen 0;
#X text 519 409 stop listening;
#X msg 56 387 1 2 3 foo 5;
#X text 50 362 numbers and symbols;
#X obj 56 412 oscformat dog cat;
#X obj 221 412 oscformat -f b weasel;
#X msg 221 387 -1 1 2 3 4 5;
#X obj 56 492 print packet;
#X text 233 361 a blob;
#X text 415 358 packets from network;
#X text 520 382 slisten on port 5000;
#X text 557 437 UDP packets \, binary output, f 13;
#X text 45 41 oscparse take incoming lists of numbers \, interpreting
them as the bytes in an OSC message. The output is a list containing
\, first \, the symbols making up the address of the OSC packet \,
and following that \, numbers and symbols as present in the OSC message.
OSC messages may contain 'float' \, 'int' \, 'string' \, or 'blob'
elements. Blobs are arrays of bytes (numbers between 0 and 255) and
are copied to the output preceded by the blob's byte count.;
#X text 80 11 oscparse - parse Open Sound Control (OSC) packets into
Pd messages, f 67;
#X text 44 187 OSC is a complicated networking protocol (FUDI \, as
used in netsend/netreceive is simpler and better but less widely used).
oscparse and oscformat make no attempt to deal with timetags or aggregates
of packets \, nor with streaming OSC. Also \, no attempt is made here
to clearly distinguish between the OSC address (symbols) and the following
data \, nor between blobs and lists of numbers - it is assumed that
you know what types the message should contain. You can alternatively
use the OSC objects from mrpeach which have more features than these.
;
#X connect 0 0 5 0;
#X connect 7 0 0 0;
#X connect 8 0 7 0;
#X connect 9 0 7 0;
#X connect 11 0 13 0;
#X connect 13 0 0 0;
#X connect 13 0 16 0;
#X connect 14 0 0 0;
#X connect 14 0 16 0;
#X connect 15 0 14 0;

#N struct text-help-struct float x float y text z;
#N canvas 336 260 638 476 12;
#X obj 131 432 list;
#X obj 18 6 text;
#X text 25 431 see also:;
#N canvas 0 50 600 400 (subpatch) 0;
#N canvas 0 50 450 250 (subpatch) 0;
#X array table4 100 float 0;
#X coords 0 1 99 -1 500 300 1;
#X restore 50 50 graph;
#X restore 171 432 array;
#X obj 280 215 text define;
#X text 365 430 updated for Pd version 0.45.;
#X text 81 172 The text object's first argument sets its function:
, f 30;
#X text 62 50 In Pd a "text" refers to a list of atoms that can include
commas \, semicolons \, and dollar-sign constructs - anything that
can go in a message box or a patch (as a saved file). You can use them
to store a semicolon-separated list of lists \, or as material to "execute"
as in a sequencer or message box.;
#N canvas 411 163 739 473 define 0;
#X msg 35 138 clear;
#X obj 38 400 text define -k text-help-1;
#A addline this is a message \; this is another 1 ... \;;
#X msg 32 167 read text-object-help.txt;
#X msg 35 198 write text-object-help.txt;
#X text 32 20 "text define" maintains a text object and can name it
so that other objects can find it (and later should have some alternative
\, anonymous way to be found).;
#X text 61 376 click to open and edit text:;
#X text 296 364 creation arguments:;
#X text 324 382 optional -k flag to keep contents;
#X text 326 399 optional name;
#X msg 166 318 read -c text-object-help.txt;
#X text 77 263 (optionally you can read or write to/from a file interpreting
carriage returns as separators \; this should allow reading some text
file formats - like this:);
#X text 274 165 read from a file;
#X text 276 196 write to a file;
#X text 277 139 clear;
#X connect 0 0 1 0;
#X connect 2 0 1 0;
#X connect 3 0 1 0;
#X restore 389 217 pd define;
#X obj 280 240 text get;
#N canvas 745 243 859 566 get 0;
#X floatatom 47 115 5 0 5 0 - - -, f 5;
#X msg 47 84 0;
#X msg 123 84 2;
#X msg 83 84 1;
#X obj 47 262 print;
#X obj 148 287 print type;
#X msg 160 87 3;
#X msg 200 89 4;
#X text 242 285 "type" is 0 if terminated by a semicolon \, 1 if by
a comma \, or 2 if the line number was out of range.;
#X obj 72 520 text define -k text-help-get;
#A addline x y z w w \; 12 23 34 45 56 56 \; 1 2 3 \, 4 5 6 \;;
#X obj 47 217 text get text-help-get, f 13;
#X floatatom 50 394 5 0 0 0 - - -, f 5;
#X msg 50 363 0;
#X msg 126 363 2;
#X msg 86 363 1;
#X obj 50 465 print;
#X msg 163 366 3;
#X msg 203 368 4;
#X obj 50 438 text get text-help-get 1;
#X text 165 204 arguments: name of the text object or "-s struct-name"
;
#X floatatom 462 410 5 0 0 0 - - -, f 5;
#X msg 462 379 0;
#X msg 538 379 2;
#X msg 498 379 1;
#X obj 462 461 print;
#X msg 575 382 3;
#X msg 615 384 4;
#X text 259 437 read field number 1 (zero for first field), f 23;
#X obj 461 434 text get text-help-get 1 3;
#X text 127 332 examples showing field selection:;
#X text 32 20 "text get" reads the nth line from the named text and
outputs it \, or optionally reads one or more specific fields (atoms)
from the line.;
#X text 101 115 spedcify line number (0 for first line);
#X floatatom 97 144 5 0 5 0 - - -, f 5;
#X floatatom 148 170 5 0 5 0 - - -, f 5;
#X text 196 169 specify number of fields (1 by default \, but ignored
if whole line), f 66;
#X text 680 434 read 3 fields starting at field 1, f 21;
#X text 145 143 starting field number (-1 \, the default \, gives the
whole line), f 61;
#X text 162 224 next optional arg to set starting field number (first
inlet -- none to specify whole line), f 63;
#X text 166 261 next optional arg to set inlet 2 (number of fields
\, defaults to one), f 68;
#X connect 0 0 10 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X connect 10 0 4 0;
#X connect 10 1 5 0;
#X connect 11 0 18 0;
#X connect 12 0 11 0;
#X connect 13 0 11 0;
#X connect 14 0 11 0;
#X connect 16 0 11 0;
#X connect 17 0 11 0;
#X connect 18 0 15 0;
#X connect 20 0 28 0;
#X connect 21 0 20 0;
#X connect 22 0 20 0;
#X connect 23 0 20 0;
#X connect 25 0 20 0;
#X connect 26 0 20 0;
#X connect 28 0 24 0;
#X connect 32 0 10 1;
#X connect 33 0 10 2;
#X restore 389 241 pd get;
#N canvas 480 423 807 554 text-and-data-structures 0;
#X floatatom 65 196 5 0 0 0 - - -, f 5;
#X msg 65 165 0;
#X msg 140 165 2;
#X msg 100 165 1;
#X obj 65 387 print;
#X obj 206 391 print type;
#X obj 206 315 pointer;
#X obj 65 347 text get -s text-help-struct z, f 18;
#N canvas 807 416 450 300 text-help-struct 0;
#X scalar text-help-struct 20 20 \; a b c d \;;
#X obj 79 230 pointer;
#X msg 79 172 traverse pd-text-help-struct \, bang, f 21;
#X obj 22 257 append text-help-struct x y;
#X msg 23 172 20 20;
#X obj 13 56 struct text-help-struct float x float y text z;
#X obj 13 83 filledpolygon 0 0 0 0 0 0 10 10 10 10 0 0 0;
#X obj 15 120 drawtext z 16 -3 0;
#X connect 1 0 3 2;
#X connect 2 0 1 0;
#X connect 4 0 3 0;
#X restore 208 136 pd text-help-struct;
#X obj 65 218 t f b;
#X text 58 35 a simple example showing how to access text in data structures
via pointers.;
#N canvas 851 144 450 300 text-help-data 0;
#X scalar text-help-struct 20 20 \; a b c d \\\; 1 2 3 \\\; \;;
#X text 13 86 We have one datum (above) whose "z" field is text.;
#X restore 209 108 pd text-help-data;
#X msg 205 258 traverse pd-text-help-data \, next, f 18;
#X text 88 466 bug - saving multi-line texts inside structures;
#X obj 586 333 pointer;
#X msg 585 276 traverse pd-text-help-data \, next, f 18;
#X obj 445 365 text set -s text-help-struct z, f 18;
#X obj 445 236 t l b;
#X floatatom 492 337 5 0 0 0 - - -, f 5;
#X msg 478 292 0;
#X msg 553 292 2;
#X msg 513 292 1;
#X msg 443 158 1 2 3;
#X msg 454 194 list a b c d;
#X connect 0 0 9 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 6 0 7 3;
#X connect 7 0 4 0;
#X connect 7 1 5 0;
#X connect 9 0 7 0;
#X connect 9 1 12 0;
#X connect 12 0 6 0;
#X connect 14 0 16 3;
#X connect 15 0 14 0;
#X connect 17 0 16 0;
#X connect 17 1 15 0;
#X connect 18 0 16 1;
#X connect 19 0 18 0;
#X connect 20 0 18 0;
#X connect 21 0 18 0;
#X connect 22 0 17 0;
#X connect 23 0 17 0;
#X restore 81 360 pd text-and-data-structures;
#X text 71 336 here's how to access texts inside data structures:;
#X text 63 6 - manage a list of messages;
#X obj 219 432 scalar;
#X obj 280 288 text size;
#N canvas 849 157 597 296 size 0;
#X obj 71 55 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 50 198 text define -k text-help-size;
#A addline asd dfg \; 1 2 3 \;;
#X obj 71 131 text size text-help-size;
#X floatatom 71 156 5 0 0 0 - - -, f 5;
#X floatatom 80 91 5 0 2 0 - - -, f 5;
#X text 46 11 "text size" reports the number of lines in the text or
the length of a specified line.;
#X text 100 52 bang for number of lines;
#X text 129 89 float for length of nth line (-1 if line number out
of range);
#X connect 0 0 2 0;
#X connect 2 0 3 0;
#X connect 4 0 2 0;
#X restore 390 287 pd size;
#X obj 280 264 text set;
#N canvas 753 359 834 537 set 0;
#X floatatom 134 201 5 0 0 0 - - -, f 5;
#X msg 134 167 0;
#X msg 207 169 2;
#X msg 167 169 1;
#X msg 62 111 list x y z w;
#X msg 68 137 1 2 3;
#X msg 53 84 12 23 34 45 56 56;
#X text 46 9 "text set" replaces the nth line with the incoming list.
If the numbe n is greater than the number of lines in the text the
new line is added.;
#X obj 52 481 text define -k text-help-3;
#A addline 12 23 34 45 56 56 \; x y z w \; 1 2 3 \; 12 23 34 45 56
56 \; x y z w \; 1 2 3 \;;
#X obj 56 279 text set text-help-3;
#X msg 250 169 1e+06;
#X floatatom 213 232 5 0 0 0 - - -, f 5;
#X text 211 85 list to write into the text;
#X text 192 201 line number - use a large number to append a line;
#X text 260 231 field number - if supplied \, replace text starting
at this field \, or if not \, replace whole line.;
#X text 244 271 arguments: name of the text object or "-s struct-name"
;
#X text 244 296 next optional arg to set inlet 1 (line number), f
63;
#X text 245 324 next optional arg to set inlet 2 (number of fields
\, defaults to whole line), f 52;
#X text 70 383 if inlet 2 is supplied to specify a starting field \,
the line is not resized - instead \, as many items are replaced as
were in the list at left. Otherwise \, the line is resized to the size
of the list.;
#X connect 0 0 9 1;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 9 0;
#X connect 5 0 9 0;
#X connect 6 0 9 0;
#X connect 10 0 0 0;
#X connect 11 0 9 2;
#X restore 389 264 pd set;
#X text 388 176 (click for details), f 11;
#X text 60 216 create \, store \, and/or edit;
#X text 91 239 read and output a line;
#X text 100 263 replace or add a line;
#X text 115 288 get number of lines;
